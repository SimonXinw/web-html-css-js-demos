<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>倒计时器</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Arial", sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
      }

      .container {
        width: 100%;
        max-width: 800px;
        text-align: center;
      }

      /* 顶部控制区域 */
      .control-panel {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        flex-wrap: wrap;
      }

      .time-input {
        padding: 12px 16px;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        background: rgba(255, 255, 255, 0.9);
        color: #333;
        outline: none;
        transition: all 0.3s ease;
      }

      .time-input:focus {
        box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
      }

      .confirm-btn {
        padding: 12px 24px;
        background: linear-gradient(45deg, #ff6b6b, #ee5a24);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      }

      .confirm-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
      }

      .confirm-btn:active {
        transform: translateY(0);
      }

      /* 倒计时器区域 */
      .countdown-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin: 40px 0;
      }

      .time-unit {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
      }

      .time-label {
        color: white;
        font-size: 18px;
        font-weight: bold;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
      }

      /* 翻页数字框 */
      .flip-box {
        position: relative;
        width: 80px;
        height: 100px;
        perspective: 400px;
      }

      .flip-card {
        position: relative;
        width: 100%;
        height: 100%;
        transform-style: preserve-3d;
        transition: transform 0.6s;
      }

      .flip-card.flipping {
        transform: rotateX(-180deg);
      }

      .flip-card-front,
      .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 36px;
        font-weight: bold;
        color: white;
        background: linear-gradient(145deg, #2c3e50, #34495e);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
      }

      .flip-card-back {
        transform: rotateX(180deg);
        background: linear-gradient(145deg, #e74c3c, #c0392b);
      }

      /* 折痕效果 */
      .flip-card-front::after,
      .flip-card-back::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: rgba(255, 255, 255, 0.2);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      }

      /* 状态显示 */
      .status {
        margin-top: 30px;
        padding: 15px 30px;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 10px;
        color: white;
        font-size: 18px;
        font-weight: bold;
        transition: all 0.3s ease;
      }

      .status.completed {
        background: rgba(231, 76, 60, 0.2);
        color: #ff6b6b;
      }

      /* 实时更新动画效果 */
      .flip-card-front,
      .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 36px;
        font-weight: bold;
        color: white;
        background: linear-gradient(145deg, #2c3e50, #34495e);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
      }

      .flip-card-front.updating,
      .flip-card-back.updating {
        background: linear-gradient(145deg, #e67e22, #d35400);
        box-shadow: 0 6px 20px rgba(230, 126, 34, 0.4);
      }

      /* 脉冲动画效果 */
      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
        100% {
          transform: scale(1);
        }
      }

      .pulse {
        animation: pulse 0.5s ease-in-out;
      }

      /* 实时时间显示 */
      .real-time {
        margin-top: 20px;
        padding: 10px 20px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        color: rgba(255, 255, 255, 0.8);
        font-size: 14px;
        font-family: "Courier New", monospace;
      }

      /* 响应式设计 */
      @media (max-width: 768px) {
        .control-panel {
          flex-direction: column;
          gap: 15px;
        }

        .countdown-container {
          gap: 10px;
        }

        .flip-box {
          width: 60px;
          height: 80px;
        }

        .flip-card-front,
        .flip-card-back {
          font-size: 28px;
        }

        .time-label {
          font-size: 14px;
        }
      }

      @media (max-width: 480px) {
        .flip-box {
          width: 50px;
          height: 70px;
        }

        .flip-card-front,
        .flip-card-back {
          font-size: 24px;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <!-- 顶部控制区域 -->
      <div class="control-panel">
        <input
          type="datetime-local"
          id="endTime"
          class="time-input"
          placeholder="选择结束时间"
        />
        <button id="startBtn" class="confirm-btn">开始倒计时</button>
      </div>

      <!-- 倒计时器 -->
      <div class="countdown-container" id="countdownContainer">
        <div class="time-unit">
          <div class="flip-box">
            <div class="flip-card" id="hoursCard">
              <div class="flip-card-front">00</div>
              <div class="flip-card-back">00</div>
            </div>
          </div>
          <div class="time-label">小时</div>
        </div>

        <div class="time-unit">
          <div class="flip-box">
            <div class="flip-card" id="minutesCard">
              <div class="flip-card-front">00</div>
              <div class="flip-card-back">00</div>
            </div>
          </div>
          <div class="time-label">分钟</div>
        </div>

        <div class="time-unit">
          <div class="flip-box">
            <div class="flip-card" id="secondsCard">
              <div class="flip-card-front">00</div>
              <div class="flip-card-back">00</div>
            </div>
          </div>
          <div class="time-label">秒</div>
        </div>
      </div>

      <!-- 状态显示 -->
      <div class="status" id="status">请选择结束时间并点击开始</div>

      <!-- 实时时间显示 -->
      <div class="real-time" id="realTime"></div>
    </div>

    <script>
      class CountdownTimer {
        constructor() {
          this.endTime = null;
          this.timer = null;
          this.isRunning = false;
          this.currentHours = 0;
          this.currentMinutes = 0;
          this.currentSeconds = 0;

          this.initializeElements();

          this.bindEvents();
        }

        initializeElements() {
          this.endTimeInput = document.getElementById("endTime");
          this.startBtn = document.getElementById("startBtn");
          this.status = document.getElementById("status");
          this.realTime = document.getElementById("realTime");
          this.hoursCard = document.getElementById("hoursCard");
          this.minutesCard = document.getElementById("minutesCard");
          this.secondsCard = document.getElementById("secondsCard");
        }

        bindEvents() {
          this.startBtn.addEventListener("click", () => this.startCountdown());

          // 设置默认时间为明天（24小时后）
          const defaultTime = new Date();

          defaultTime.setDate(defaultTime.getDate() + 1); // 设置为明天

          this.endTimeInput.value = this.formatDateTimeLocal(defaultTime);

          // 启动实时时间显示
          this.startRealTimeDisplay();

          this.startCountdown();
        }

        formatDateTimeLocal(date) {
          const year = date.getFullYear();
          const month = String(date.getMonth() + 1).padStart(2, "0");
          const day = String(date.getDate()).padStart(2, "0");
          const hours = String(date.getHours()).padStart(2, "0");
          const minutes = String(date.getMinutes()).padStart(2, "0");
          return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        startCountdown() {
          const selectedTime = this.endTimeInput.value;

          if (!selectedTime) {
            this.showStatus("请选择结束时间", false);
            return;
          }

          this.endTime = new Date(selectedTime);
          const now = new Date();

          if (this.endTime <= now) {
            this.showStatus("结束时间不能早于当前时间", false);
            return;
          }

          // 如果已经在运行，先停止
          if (this.isRunning) {
            this.stopCountdown();
            return;
          }

          this.isRunning = true;
          this.startBtn.textContent = "停止倒计时";
          this.startBtn.style.background =
            "linear-gradient(45deg, #e74c3c, #c0392b)";
          this.showStatus("倒计时进行中...", false);

          // 立即更新一次显示
          this.updateCountdown();

          // 设置定时器，每秒更新一次
          this.timer = setInterval(() => {
            this.updateCountdown();
          }, 1000);

          console.log("倒计时已开始，结束时间:", this.endTime);
        }

        stopCountdown() {
          if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
          }
          this.isRunning = false;
          this.startBtn.textContent = "开始倒计时";
          this.startBtn.style.background =
            "linear-gradient(45deg, #ff6b6b, #ee5a24)";
          this.showStatus("倒计时已停止", false);
        }

        updateCountdown() {
          if (!this.isRunning) return;

          const now = new Date();
          const timeLeft = this.endTime - now;

          if (timeLeft <= 0) {
            this.stopCountdown();
            this.showStatus("倒计时结束！", true);
            this.displayTime(0, 0, 0);
            return;
          }

          const hours = Math.floor(timeLeft / (1000 * 60 * 60));
          const minutes = Math.floor(
            (timeLeft % (1000 * 60 * 60)) / (1000 * 60)
          );
          const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

          this.displayTime(hours, minutes, seconds);
        }

        getCurrentDisplayValue(card) {
          const front = card.querySelector(".flip-card-front");
          return parseInt(front.textContent);
        }

        showStatus(message, isCompleted = false) {
          this.status.textContent = message;
          this.status.className = `status${isCompleted ? " completed" : ""}`;
        }

        // 实时时间显示
        startRealTimeDisplay() {
          const updateRealTime = () => {
            const now = new Date();

            const timeString = now.toLocaleString("zh-CN", {
              year: "numeric",
              month: "2-digit",
              day: "2-digit",
              hour: "2-digit",
              minute: "2-digit",
              second: "2-digit",
            });

            this.realTime.textContent = `当前时间: ${timeString}`;
          };

          updateRealTime();

          setInterval(updateRealTime, 1000);
        }

        // 简化的翻页动画 - 确保每次都能触发
        flipCard(card, oldValue, newValue) {
          const front = card.querySelector(".flip-card-front");
          const back = card.querySelector(".flip-card-back");

          // 设置新值
          front.textContent = String(oldValue).padStart(2, "0");
          back.textContent = String(newValue).padStart(2, "0");

          // 添加更新动画效果
          front.classList.add("updating");
          back.classList.add("updating");

          // 添加翻页动画
          card.classList.add("flipping");

          // 动画结束后更新显示值
          setTimeout(() => {
            front.textContent = String(newValue).padStart(2, "0");
            card.classList.remove("flipping");
            front.classList.remove("updating");
            back.classList.remove("updating");

            // 添加脉冲效果
            card.classList.add("pulse");
            setTimeout(() => card.classList.remove("pulse"), 500);
          }, 300);
        }

        // 实时更新倒计时显示 - 每秒都触发翻页
        displayTime(hours, minutes, seconds) {
          // 更新小时
          if (hours !== this.currentHours) {
            this.flipCard(this.hoursCard, this.currentHours, hours);
            this.currentHours = hours;
          }

          // 更新分钟
          if (minutes !== this.currentMinutes) {
            this.flipCard(this.minutesCard, this.currentMinutes, minutes);
            this.currentMinutes = minutes;
          }

          // 更新秒数 - 每秒都触发翻页动画
          if (seconds !== this.currentSeconds) {
            this.flipCard(this.secondsCard, this.currentSeconds, seconds);
            this.currentSeconds = seconds;
          }

          // 添加状态更新动画
          if (this.isRunning) {
            this.status.classList.add("pulse");
            setTimeout(() => this.status.classList.remove("pulse"), 500);
          }
        }
      }

      // 初始化倒计时器
      const countdownTimer = new CountdownTimer();
    </script>
  </body>
</html>

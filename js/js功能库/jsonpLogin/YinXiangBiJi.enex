<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export2.dtd">
<en-export export-date="20191017T010048Z" application="Evernote/Windows" version="6.x">
<note><title>Day24</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note><div><font style="font-size: 18pt;"><span style="font-size: 18pt; color: rgb(227, 0, 0); font-weight: bold;">ajax（下）</span></font></div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><span style="font-size: 14pt; font-weight: bold;">ajax跨域</span></font></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="font-size: 14pt;">由于浏览器的同源策略，禁止ajax从一个域名请求另外一个域名上的数据。</span></div><div><span style="font-size: 14pt;">浏览器的同源策略，是对JavaScript实施的安全限制。</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(227, 0, 0);">所谓的同源是指，域名、协议、端口均为相同。</span></span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;"><a style="font-size: 14pt;" href="http://image.baidu.com/search/detail?ct=503316480&amp;z=undefined#header" dir="ltr">http://image.baidu.com:80/search/detail?ct=503316480&amp;z=undefined#header</a></span></div><div><span style="font-size: 14pt;">URL构成：</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">http</span> <span style="font-size: 14pt;">---- 超文本传输协议</span></div><div><span style="font-size: 14pt;"><a style="font-size: 14pt;" href="http://image.baidu.com/" dir="ltr">image.baidu.com</a></span> <span style="font-size: 14pt;">---- 域名</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">80</span> <span style="font-size: 14pt;">---- 端口</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">/search/detail</span> <span style="font-size: 14pt;">---- 资源目录</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">ct=503316480&amp;z=undefined</span> <span style="font-size: 14pt;">---- 发送到服务器的数据</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">#header</span> <span style="font-size: 14pt;">---- 锚点</span></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="font-size: 14pt;">判断如下请求是否为跨域：</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);"><a style="font-size: 14pt;" href="http://local.com/index.html" dir="ltr">http://local.com/index.html</a>   </span><span style="font-size: 14pt;">请求</span><span style="font-size: 14pt; color: rgb(45, 79, 201);"> </span> <a style="font-size: 14pt;" href="http://native.com/index.php" dir="ltr">http://native.com/index.php</a> </div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);"><a style="font-size: 14pt;" href="https://www.abc.com/index.html" dir="ltr">https://www.abc.com/index.html</a> </span> <span style="font-size: 14pt;">请求</span><span style="font-size: 14pt; color: rgb(45, 79, 201);"> </span> <a style="font-size: 14pt;" href="http://www.abc.com/index.php" dir="ltr">http://www.abc.com/index.php</a> </div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);"><a style="font-size: 14pt;" href="http://www.abc.com:8888/index.html" dir="ltr">http://www.abc.com:8888/index.html</a> </span> <span style="font-size: 14pt;">请求 </span> <span style="font-size: 14pt;"><a style="font-size: 14pt;" href="http://www.abc.com:8889/index.php" dir="ltr">http://www.abc.com:8889/index.php</a> </span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);"><a style="font-size: 14pt;" href="http://www.abc.com/item/index.html" dir="ltr">http://www.abc.com/item/index.html</a> </span> <span style="font-size: 14pt;">请求</span><span style="font-size: 14pt; color: rgb(45, 79, 201);"> </span> <a style="font-size: 14pt;" href="http://www.abc.com/index.php" dir="ltr">http://www.abc.com/index.php</a></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);"><a style="font-size: 14pt;" href="http://localhost/abc.html" dir="ltr">http://localhost/abc.html</a> </span> <span style="font-size: 14pt;">请求</span><span style="font-size: 14pt; color: rgb(45, 79, 201);"> </span> <a style="font-size: 14pt;" href="http://127.0.0.1/wed.html">http://127.0.0.1/wed.</a>php</div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><span style="font-size: 14pt; font-weight: bold;">几种主流的跨域解决方案：</span></font></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="font-size: 14pt;">第一种：通过服务端语言代理请求。如PHP，服务端语言php是没有跨域限制的。</span></div><div><span style="font-size: 14pt;">- 让服务器去别的网站获取内容然后返回页面。</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;">第二种：jsonp跨域</span></div><div><span style="font-size: 14pt;">- </span><span style="font-size: 14pt;">jsonp跨域就是利用script标签的跨域能力请求资源</span></div><div><span style="font-size: 14pt;">- </span><span style="font-size: 14pt;">既然叫jsonp，显然目的还是json，而且是跨域获取</span></div><div><span style="font-size: 14pt;">- </span><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(227, 0, 0);">利用js创建一个script标签，把json的url赋给script的scr属性，把这个script插入到页面里，让浏览器去跨域获取资源</span></span></div><div><span style="font-size: 14pt;">- </span><span style="font-size: 14pt;">callback是页面存在的回调方法，参数就是想得到的json</span></div><div><span style="font-size: 14pt;">- 回调方法要遵从服务端的约定一般是用 callback 或者 cb</span></div><div><span style="font-size: 14pt;">- <span style="font-size: 14pt; color: rgb(227, 0, 0);">注意：</span></span><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(227, 0, 0);">jsonp只针对get请求</span></span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;">第三种：</span><span style="font-size: 14pt;">CORS 跨域资源共享(xhr2)</span></div><div><span style="font-size: 14pt;">- </span><span style="font-size: 14pt;">CORS是一个W3C标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）</span></div><div><span style="font-size: 14pt;">- </span><span style="font-size: 14pt;">它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制</span></div><div><span style="font-size: 14pt;">- </span><span style="font-size: 14pt;">整个CORS通信过程，都是浏览器自动完成，不需要用户参与</span></div><div><span style="font-size: 14pt;">- 对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样</span></div><div><span style="font-size: 14pt;">- 实现CORS通信的关键是服务端，只要服务端实现了CORS接口，就可以跨源通信</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;">实现CORS并不难，只需服务端做一些设置即可：如</span></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(45, 79, 201);">&lt;?php</span></span></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(45, 79, 201);">header(&quot;Access-Control-Allow-Origin:*&quot;);</span> <span style="font-size: 14pt; color: rgb(168, 168, 168);">// 允许任何来源</span></span></div><div><span style="font-size: 14pt;">注意：IE10以下不支持CORS</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;">第四种：</span><span style="font-size: 14pt;">nginx代理跨域</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;">练习：</span></div><div><span style="font-size: 14pt;">1．</span><span style="font-size: 14pt;">百度搜索下拉提示</span></div><div><span style="font-size: 14pt;">2 . 手机号码查询</span></div><div><span style="font-size: 14pt;">3．一周</span><span style="font-size: 14pt;">天气预报展示</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;"><br/></span></div><div><font style="font-size: 16pt;"><span style="font-size: 16pt; color: rgb(227, 0, 0); font-weight: bold;">Promise - “承诺”</span></font></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(51, 51, 51); font-variant-caps: normal; font-variant-ligatures: normal;">Promise 是ES6对异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。</span></span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">Promise 简单说就是一个容器，里面保存着</span><span style="font-size: 14pt; color: rgb(51, 51, 51);">一个尚未完成且预计在未来完成的异步操作</span><span style="font-size: 14pt; color: rgb(51, 51, 51);">。</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><font style="font-size: 14pt;"><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14pt; color: rgb(51, 51, 51); font-variant-caps: normal; font-variant-ligatures: normal;">Promise 是一个构造函数，用来创建一个</span><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14pt; color: rgb(51, 51, 51); font-variant-caps: normal; font-variant-ligatures: normal;">Promise对象。</span></font></div><div><br/></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">Promise对象代表一个异步操作，有三种状态：</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">pending（进行中）</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">fulfilled（已成功）</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">rejected（已失败）</span></div><div><br/></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">Promise 对象的状态改变有两种：</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">从 pending 变为 fulfilled</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">从 pending 变为 rejected</span></div><div><br/></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">一旦状态改变，就不会再变，任何时候都可以得到这个结果。</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">有了Promise对象，就可以</span><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(227, 0, 0);">将异步操作以同步操作的流程表达出来</span></span><span style="font-size: 14pt; color: rgb(51, 51, 51);">，避免了层层嵌套的回调函数。</span></div><div><br/></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">var p = new Promise(function(resolve, reject) {</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">  </span><span style="font-size: 14pt; color: rgb(168, 168, 168);">// do something ...</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">  if (</span><span style="font-size: 14pt; color: rgb(168, 168, 168);">/* 异步操作成功 */</span><span style="font-size: 14pt; color: rgb(45, 79, 201);">){</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">    resolve(value);</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">  } else {</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">    reject(error);</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">  }</span></div><div><span style="font-size: 14pt; color: rgb(45, 79, 201);">});</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">resolve 和 reject </span><span style="font-size: 14pt; color: rgb(51, 51, 51);">是两个函数，由 JavaScript 引擎提供，不用自己部署。</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">resolve 函数的作用是，将Promise对象的状态从“进行中”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">reject 函数的作用是，将Promise对象的状态从“进行中”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(45, 79, 201);">p.</span><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(227, 0, 0);">then</span></span><span style="font-size: 14pt; color: rgb(45, 79, 201);">(function(value) {</span></span></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(45, 79, 201);">  </span><span style="font-size: 14pt; color: rgb(168, 168, 168);">// success</span></span></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(45, 79, 201);">}, function(error) {</span></span></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(45, 79, 201);">  </span><span style="font-size: 14pt; color: rgb(168, 168, 168);">// failure  可选</span></span></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(45, 79, 201);">});</span></span></div><div><br/></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">Promise实例的then方法：</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">第一个参数是resolved状态的回调函数</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">第二个参数（可选）是rejected状态的回调函数</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">方法返回的是一个新的Promise实例</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><font style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(51, 51, 51);">Promise实例的</span><span style="font-size: 14pt;"><span style="font-size: 14pt; color: rgb(227, 0, 0);">catch</span></span><span style="font-size: 14pt; color: rgb(51, 51, 51);">方法：用于指定发生错误时的回调函数。</span></font></div><div><font style="font-size: 14pt;"><br/></font></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68); font-variant-caps: normal;">Promise.all可以将多个Promise实例包装成一个新的Promise实例。</span></span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68); font-variant-caps: normal;">1.它接受一个数组作为参数。</span></span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68); font-variant-caps: normal;">2.数组可以是Promise对象，也可以是其它值，只有Promise会等待状态改变。</span></span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68); font-variant-caps: normal;">3.当所有的子Promise都完成，该Promise完成，返回值是全部值的数组。</span></span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68); font-variant-caps: normal;">4.如果有任何一个失败，该Promise失败，返回值是第一个失败的子Promise的结果。</span></span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68);">Promise.all([p1,p2,p3]).then(function (arr){</span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68);">    console.log(arr);</span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68);">},function (error){</span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68);">    console.log(error);</span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="font-size: 14pt; color: rgb(68, 68, 68);">});</span></div><div style="margin: 10px auto; padding: 0px; list-style-type: none; list-style-image: none; text-indent: 0px; caret-color: rgb(68, 68, 68); font-size: 14px; letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><span style="text-indent: 0px; caret-color: rgb(68, 68, 68); font-size: 14px; letter-spacing: normal; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-tap-highlight-color: rgba(26, 26, 26, 0.3); text-size-adjust: none; -webkit-text-stroke-width: 0px;"><br/></span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">1.Promise 改造 函数嵌套</span></div><div><br/></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51);">2.Promise 改造 ajax嵌套依赖</span></div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="box-sizing: border-box; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14pt; color: rgb(47, 47, 47); font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">了解 fetch 与 </span> <span style="box-sizing: border-box; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14pt; color: rgb(47, 47, 47); font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">axios</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt; box-sizing: border-box; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(47, 47, 47); font-variant-caps: normal; font-variant-ligatures: normal;">fetch：</span><span style="font-size: 14pt; color: rgb(47, 47, 47);">号称是AJAX的替代品，是基于promise设计的。</span></div><div><span style="font-size: 14pt; color: rgb(47, 47, 47);">fetch不是ajax的进一步封装，而是原生js，代码结构比起ajax简单多了。</span></div><div><span style="font-size: 14pt;"><a style="font-size: 14pt;" href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt; box-sizing: border-box; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(47, 47, 47); font-variant-caps: normal; font-variant-ligatures: normal;">axios：</span><span style="font-size: 14pt; color: rgb(47, 47, 47);">是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</span></div><div><span style="font-size: 14pt; color: rgb(47, 47, 47);">vue官方推荐的HTTP请求库。</span></div><div><span style="font-size: 14pt;"><a style="font-size: 14pt;" href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></span></div><div><span style="font-size: 14pt;"><br/></span></div><div><font style="font-size: 14pt;"><br/></font></div></en-note>
]]></content><created>20190519T042317Z</created><updated>20191017T002117Z</updated><note-attributes><author>陶舒健</author><source>desktop.win</source><source-url>https://www.imooc.com/article/21976</source-url><source-application>yinxiang.win32</source-application></note-attributes></note></en-export>
